#pragma once
#include "ofMain.h"
#include <atomic>
struct AppState { enum class Shape { Circle, Line, Triangle, Square, StaticWave }; enum class ColorSel { Blue, Red, Green }; enum class Movement { None, Circle, Pan, Tilt, Eight, Random }; enum class BeamFx { None, Prisma }; std::atomic<Shape> currentShape{Shape::Circle}; std::atomic<ColorSel> currentColor{ColorSel::Blue}; std::atomic<Movement> movement{Movement::None}; std::atomic<bool> useCustomColor{false}; std::atomic<float> customR{0.0f}, customG{0.20f}, customB{1.0f}; std::atomic<float> waveFrequency{1.0f}, waveAmplitude{0.45f}, waveSpeed{0.0f}; std::atomic<float> rainbowSpeed{0.0f}, rainbowAmount{0.0f}, rainbowBlend{1.0f}; std::atomic<float> moveSpeed{0.30f}, moveSize{0.50f}; std::atomic<float> rotationSpeed{0.0f}, rotationSpeedTarget{0.0f}; std::atomic<bool> motionHold{false}; std::atomic<float> heldRotationSpeed{0.0f}, heldMoveSpeed{0.0f}, heldWaveSpeed{0.0f}; std::atomic<float> shapeScale{0.0f}, shapeScaleTarget{0.0f}; std::atomic<float> posNormX{0.0f}, posNormY{0.0f}, posTargetX{0.0f}, posTargetY{0.0f}; std::atomic<bool> invertX{false}, holdInvertX{false}, holdWhiteFlash{false}, blackout{false}; std::atomic<BeamFx> beamFx{BeamFx::None}; std::atomic<float> masterBrightness{1.0f}; std::atomic<float> dotAmount{1.0f}, dotAmountTarget{1.0f}; std::atomic<float> scanRateHz{0.0f}; ofColor toOfColor(float rainbowHue01 = -1.0f) const { if (useCustomColor.load()) { float r = ofClamp(customR.load(),0,1), g = ofClamp(customG.load(),0,1), b = ofClamp(customB.load(),0,1); ofColor base((unsigned char)(r*255),(unsigned char)(g*255),(unsigned char)(b*255)); if(rainbowHue01>=0){ float amt = ofClamp(rainbowAmount.load(),0,1); if(amt>0){ ofColor rb; rb.setHsb((unsigned char)ofClamp(rainbowHue01*255,0,255),255,255); base = base.lerp(rb, amt);} } return base; } else { ofColor base; switch(currentColor.load()){ case ColorSel::Red: base = ofColor(255,0,20); break; case ColorSel::Green: base = ofColor(0,220,80); break; default: base = ofColor(0,50,255); break; } if(rainbowHue01>=0){ float amt = ofClamp(rainbowAmount.load(),0,1); if(amt>0){ ofColor rb; rb.setHsb((unsigned char)ofClamp(rainbowHue01*255,0,255),255,255); base = base.lerp(rb, amt);} } return base; } } };
